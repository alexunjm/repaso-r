family.salary = c(40000, 60000, 70000, 80000, 50000)
family.size = c(4,3,2,4,5)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
View(family)
# obtener working directory
getwd()
# definir wd
setwd("desarrollo/repaso-r/")
# obtener working directory
getwd()
unique(family)#devuelve objeto del mismo tipo sin duplicaciones
family.salary = c(40000, 60000, 70000, 80000, 50000, 70000, 70000, "Utilitario", "Lujo")
family.size = c(4, 3, 2, 4, 5, 4, 5)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
family.salary = c(40000, 60000, 70000, 80000, 50000, 70000, 70000)
family.size = c(4, 3, 2, 4, 5, 4, 5)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Utilitario", "Lujo")
family <- data.frame(family.salary, family.size, family.car)
unique(family)#devuelve objeto del mismo tipo sin duplicaciones
family.salary = c(40000, 60000, 70000, 80000, 50000, 70000, 80000)
family.size = c(4, 3, 2, 4, 5, 4, 5)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Utilitario", "Lujo")
family <- data.frame(family.salary, family.size, family.car)
unique(family)#devuelve objeto del mismo tipo sin duplicaciones
family.unique <- unique(family)
family.salary = c(40000, 60000, 70000, 80000, 50000, 70000, 80000)
family.size = c(4, 3, 2, 5, 5, 4, 5)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Utilitario", "Lujo")
family <- data.frame(family.salary, family.size, family.car)
family.unique <- unique(family)
duplicated(family)
family[duplicated(family),]
family[!duplicated(family),]
install.packages("scales")
library("scales")
students <- read.csv("data/data-conversion.csv")
students <- read.csv("data/data-conversion.csv")
View(students)
students$Income.rescaled <- rescale(students$Income)
View(students)
(students$Income - min(students$Income))/(max(students$Income)-min(students$Income))
#reescalado en otro rango de valores
students$Income.rescaled <- rescale(students$Income, to= c(0,100))
View(students)
name <- paste(names[col], "rescaled", sep=".")
rescale.many <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(names[col], "rescaled", sep=".")
dataframe[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos reescalado ", length(cols), " variable(s)"))
dataframe
}
students <- rescale.many(students, c(1, 4))
View(students)
housing.z <- scale(housing)
housing <- read.csv("data/BostonHousing.csv")
housing.z <- scale(housing)
View(housing.z)
#Ajustarle al promedio
housing.mean <- scale(housing, center = TRUE, scale = FALSE)
scale.many = function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(names[col], "z", sep = ".")
dataframe[name] <- scale(dataframe[,col])
}
cat(paste("Hemos normalizado ", length(cols), " variable(s)"))
dataframe
}
scale.many(housing, c(1, 3, 5:8))
housing <- scale.many(housing, c(1, 3, 5:8))
View(housing)
students <- read.csv("data/data-conversion.csv")
breakPoints <- c(-Inf, 10000, 31000, Inf)
names <- c("low", "average", "high")
students$Income.cat <- cut(students$Income, breaks = breakPoints, labels = names)
View(students)
students$Income.cat2 <- cut(students$Income, breaks = breakPoints)
# dejara a R la decisión y que sea automática
students$Income.cat3 <- cut(students$Income, breaks = 4)
# dejara a R la decisión y que sea automática
students$Income.cat3 <- cut(students$Income, breaks = 4, c("lv1", "lv2", "lv3", "lv4"))
install.packages("dummy")
library("dummy")
install.packages("dummies")
library("dummies")
library("dummies")
students.dummy <- dummy.data.frame(students, sep=".")
View(students.dummy)
#categórica a numérica
install.packages("dummies")
# solo 1 col
dummy.data.frame(students$State, sep=".")
# solo 1 col
dummy(students$State, sep=".")
students.dummyG <- dummy.data.frame(students, names = c("Gender"), sep=".")
View(students.dummyG)
students <- read.csv("data/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors)
students <- read.csv("data/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
housing.data <- read.csv("data/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
housing.data <- read.csv("data/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
View(housing.data)
summary(data)
summary(data)
summary(housing.data)
housing.data.1 <- na.omit(housing.data)
summary(housing.data.1)
## filtrado selectivo
## eliminar las na de algunas cols
drop_na <- c("rad")
!(names(housing.data))%in% drop_na
housing.data.2 <- housing.data[
complete.cases(
housing.data[,!(names(housing.data))%in% drop_na]
),]
summary(housing.data.2)
## Eliminar toda una col del dataframe
housing.data$rad <- NULL
#MUY IMPORTANTE!!
summary(housing.data)
housing.data <- read.csv("data/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
housing.data <- read.csv("data/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
install.packages("Hmisc")
library("Hmisc")
library("Hmisc")
housing.data.1 <- housing.data
housing.data.copy1 <- housing.data
housing.data <- read.csv("data/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
housing.data.copy1 <- housing.data
housing.data.copy1$ptratio <- impute(housing.data.copy1$ptratio, mean)
View(housing.data.copy1)
View(housing.data)
housing.data.copy1$rad <- impute(housing.data.copy1$rad, mean)
summary(housing.data.copy1)
View(housing.data.copy1)
housing.data.copy2 <- housing.data
housing.data.copy2$ptratio <- impute(housing.data.copy2$ptratio, median)
housing.data.copy2$rad <- impute(housing.data.copy2$rad, median)
summary(housing.data.copy2)
housing.data.copy3 <- housing.data
housing.data.copy3$ptratio <- impute(housing.data.copy3$ptratio, 18)
housing.data.copy3$rad <- impute(housing.data.copy3$rad, 7)
summary(housing.data.copy3)
# análisis importante de los datos
install.packages("mice")
library("mice")
md.pattern(housing.data)
# análisis importante de los datos faltantes
install.packages("mice")
install.packages("mice")
library("mice")
md.pattern(housing.data)
install.packages("VIM")
library("VIM")
aggr(housing.data)
aggr(housing.data)
aggr(housing.data, col=c("green", "red") )
aggr(housing.data, col=c("green", "red"), numbers = TRUE )
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE
sortVars = TRUE)
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE,
sortVars = TRUE)
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE,
sortVars = TRUE,
labels = TRUE)
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE,
sortVars = TRUE,
labels = TRUE,
cex.axis = 0.7)
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7 #tamaño de la fuente para que quepan las variables
)
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7, #tamaño de la fuente para que quepan las variables
gap = 4 #standard 5
)
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7, #tamaño de la fuente para que quepan las variables
gap = 4 #standard 5
)
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7, #tamaño de la fuente para que quepan las variables
gap = 3 #standard 5
)
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7, #tamaño de la fuente para que quepan las variables
gap = 1 #standard 5
)
aggr(housing.data,
col=c("green", "red"),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7, #tamaño de la fuente para que quepan las variables
gap = 1, #standard 5
ylab = c("histograma de NAs", "Patron")
)
source('~/desarrollo/repaso-r/14-completar-datos-faltantes.R', encoding = 'UTF-8', echo=TRUE)
install.packages("mice")
install.packages("VIM")
